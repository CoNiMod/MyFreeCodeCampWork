# -*- coding: utf-8 -*-
"""fcc_book_recommendation_knn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/freeCodeCamp/boilerplate-book-recommendation-engine/blob/master/fcc_book_recommendation_knn.ipynb
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# get data files
# !wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip
# !unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

# add your code here - consider creating a new cell for each section of code

# 数据预处理：过滤掉评分少于200的用户和评分少于100的图书
# 统计每个用户的评分数量
user_rating_counts = df_ratings['user'].value_counts()
# 统计每本书的评分数量
book_rating_counts = df_ratings['isbn'].value_counts()

# 过滤用户和图书
filtered_users = user_rating_counts[user_rating_counts >= 200].index
filtered_books = book_rating_counts[book_rating_counts >= 100].index

# 应用过滤
df_ratings_filtered = df_ratings[
    (df_ratings['user'].isin(filtered_users)) & 
    (df_ratings['isbn'].isin(filtered_books))
]

# 创建用户-图书评分矩阵
# 将用户和图书ID转换为连续的整数索引
user_id_map = {user_id: idx for idx, user_id in enumerate(filtered_users)}
book_id_map = {book_isbn: idx for idx, book_isbn in enumerate(filtered_books)}

# 创建稀疏矩阵
rows = [user_id_map[user_id] for user_id in df_ratings_filtered['user']]
cols = [book_id_map[book_isbn] for book_isbn in df_ratings_filtered['isbn']]
data = df_ratings_filtered['rating'].values

# 创建稀疏矩阵
rating_matrix = csr_matrix((data, (rows, cols)), 
                          shape=(len(filtered_users), len(filtered_books)))

# 训练KNN模型
# 转置矩阵，使得每本书成为一个特征向量（每行代表一本书，每列代表一个用户）
rating_matrix_transposed = rating_matrix.T
knn_model = NearestNeighbors(metric='cosine', algorithm='brute')
knn_model.fit(rating_matrix_transposed)

# 创建反向映射：从索引到图书ISBN
book_id_reverse_map = {idx: book_isbn for book_isbn, idx in book_id_map.items()}

# function to return recommended books - this will be tested
def get_recommends(book = ""):
    # 查找图书在数据集中的索引
    book_row = df_books[df_books['title'] == book]
    
    if book_row.empty:
        return [book, []]
    
    book_isbn = book_row.iloc[0]['isbn']
    
    # 检查图书是否在过滤后的数据集中
    if book_isbn not in book_id_map:
        return [book, []]
    
    book_idx = book_id_map[book_isbn]
    
    # 获取该图书的评分向量
    book_ratings = rating_matrix[:, book_idx].toarray().flatten()
    
    # 使用KNN找到最相似的图书
    # 重塑数据以匹配sklearn的期望格式
    book_ratings_reshaped = book_ratings.reshape(1, -1)
    
    # 找到最近的邻居（排除自己）
    distances, indices = knn_model.kneighbors(book_ratings_reshaped, n_neighbors=6)
    
    # 构建推荐列表
    recommended_books = []
    for i in range(1, 6):  # 跳过第一个（自己）
        neighbor_idx = indices[0][i]
        distance = distances[0][i]
        
        # 从索引获取图书ISBN
        neighbor_isbn = book_id_reverse_map[neighbor_idx]
        
        # 从ISBN获取图书标题
        neighbor_title = df_books[df_books['isbn'] == neighbor_isbn]['title'].iloc[0]
        
        recommended_books.append([neighbor_title, distance])
    
    return [book, recommended_books]

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2):
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! 🎉🎉🎉🎉🎉")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()